// read key.properties file outside project dir
def keystoreProperties = new Properties()
if (project.hasProperty("AndroidProject.signing")){
    def keystorePropertiesFile = new File(project.property("AndroidProject.signing").toString()) 
    if (keystorePropertiesFile.canRead()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } else {  
        println 'key.properties file not found'  
    } 
} else {
    println "AndroidProject.signing is not defined"
}
  
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

import com.android.build.OutputFile

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.leastauthority.destiny"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['KEY_ALIAS']
           keyPassword keystoreProperties['KEY_PASSWORD']
           storeFile keystoreProperties['STORE_FILE'] ? file(keystoreProperties['STORE_FILE']) : null
           storePassword keystoreProperties['STORE_PASSWORD']
       }
    }

    buildTypes {
        debug {
            // Run `flutter build --debug` to sign with debug keys.
            signingConfig signingConfigs.debug
        }
        release {
            // Run flutter build --release to make build ready for upload to store 
            signingConfig signingConfigs.release

            ndk {
                // Recommended by Google Play Store for testing
                // https://developer.android.com/reference/tools/gradle-api/6.7/com/android/build/api/dsl/Ndk
                debugSymbolLevel 'SYMBOL_TABLE'
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]
            def abiCode = abiCodes.get(output.getFilter(OutputFile.ABI))
            output.versionCodeOverride = variant.versionCode * 10 + (abiCode != null ? abiCode : 0)
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
